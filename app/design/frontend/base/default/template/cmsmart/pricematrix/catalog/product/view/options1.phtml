<?php
/**
 * @author Pham Hong Thanh
 * @email thanhpham0990@gmail.com
 * @skype thanhpham170990
 */
?>

<?php if(Mage::helper('cmsmart_pricematrix')->isEnabled()):?>

<?php $_options = Mage::helper('core')->decorateArray($this->getOptions()) ?>
<?php if (count($_options)):?>
    <script type="text/javascript">
        //<![CDATA[
        var optionFileUpload = {
            productForm : $('product_addtocart_form'),
            formAction : '',
            formElements : {},
            upload : function(element){
                this.formElements = this.productForm.select('input', 'select', 'textarea', 'button');
                this.removeRequire(element.readAttribute('id').sub('option_', ''));

                template = '<iframe id="upload_target" name="upload_target" style="width:0; height:0; border:0;"><\/iframe>';

                Element.insert($('option_'+element.readAttribute('id').sub('option_', '')+'_uploaded_file'), {after: template});

                this.formAction = this.productForm.action;

                var baseUrl = '<?php echo $this->getUrl('*/product/upload') ?>';
                var urlExt = 'option_id/'+element.readAttribute('id').sub('option_', '');

                this.productForm.action = parseSidUrl(baseUrl, urlExt);
                this.productForm.target = 'upload_target';
                this.productForm.submit();
                this.productForm.target = '';
                this.productForm.action = this.formAction;
            },
            removeRequire : function(skipElementId){
                for(var i=0; i<this.formElements.length; i++){
                    if (this.formElements[i].readAttribute('id') != 'option_'+skipElementId+'_file' && this.formElements[i].type != 'button') {
                        this.formElements[i].disabled='disabled';
                    }
                }
            },
            addRequire : function(skipElementId){
                for(var i=0; i<this.formElements.length; i++){
                    if (this.formElements[i].readAttribute('name') != 'options_'+skipElementId+'_file' && this.formElements[i].type != 'button') {
                        this.formElements[i].disabled='';
                    }
                }
            },
            uploadCallback : function(data){
                this.addRequire(data.optionId);
                $('upload_target').remove();

                if (data.error) {

                } else {
                    $('option_'+data.optionId+'_uploaded_file').value = data.fileName;
                    $('option_'+data.optionId+'_file').value = '';
                    $('option_'+data.optionId+'_file').hide();
                    $('option_'+data.optionId+'').hide();
                    template = '<div id="option_'+data.optionId+'_file_box"><a href="#"><img src="var/options/'+data.fileName+'" alt=""><\/a><a href="#" onclick="optionFileUpload.removeFile('+data.optionId+')" title="Remove file" \/>Remove file<\/a>';

                    Element.insert($('option_'+data.optionId+'_uploaded_file'), {after: template});
                }
            },
            removeFile : function(optionId)
            {
                $('option_'+optionId+'_uploaded_file').value= '';
                $('option_'+optionId+'_file').show();
                $('option_'+optionId+'').show();

                $('option_'+optionId+'_file_box').remove();
            }
        }
        var optionTextCounter = {
            count : function(field,cntfield,maxlimit){
                if (field.value.length > maxlimit){
                    field.value = field.value.substring(0, maxlimit);
                } else {
                    cntfield.innerHTML = maxlimit - field.value.length;
                }
            }
        }
        Product.Options = Class.create();

        Product.Options.prototype = {
            initialize : function(config) {
                this.config = config;
                this.reloadPrice();
                document.observe("dom:loaded", this.reloadPrice.bind(this));
            },


            reloadPrice : function() {
                var config = this.config;
                var skipIds = [];								
				var _vTextOption = "";				
				var _totalPrice = 0;
				var _op_price = 0; /* price of product option default */
				var _multi_price = 0; /* price of product option default */

                $$('.product-pricematrix-option').each(function(element){
                    if(element.type == 'radio'){
                        if(element.checked){
                            var value = element.getValue();
                            value = $j.parseJSON(value);
                            $j.each(value, function(i,v){
                                optionsPrice.addCustomPrices(i, config[i][v]);
                                optionsPrice.reload();
                            });
                        }
                    }
                });

                $$('body .product-custom-option').each(function(element){
                    var optionId = 0;
                    element.name.sub(/[0-9]+/, function(match){
                        optionId = parseInt(match[0], 10);
                    });
                    if (config[optionId]) {
                        var configOptions = config[optionId];
                        var curConfig = {price: 0};
                        if (element.type == 'checkbox' || element.type == 'radio') {
                            if (element.checked) {
                                if (typeof configOptions[element.getValue()] != 'undefined') {
                                    curConfig = configOptions[element.getValue()];
									_op_price = parseFloat(_op_price) + parseFloat(curConfig.price);
                                }
                            }
                        } else if(element.hasClassName('datetime-picker') && !skipIds.include(optionId)) {
                            dateSelected = true;
                            $$('.product-custom-option[id^="options_' + optionId + '"]').each(function(dt){
                                if (dt.getValue() == '') {
                                    dateSelected = false;
                                }
                            });
                            if (dateSelected) {
                                curConfig = configOptions;
                                skipIds[optionId] = optionId;
                            }
                        } else if(element.type == 'select-one' || element.type == 'select-multiple') {
                            if ('options' in element) {
                                $A(element.options).each(function(selectOption){
                                    if ('selected' in selectOption && selectOption.selected) {
                                        if (typeof(configOptions[selectOption.value]) != 'undefined') {
                                            curConfig = configOptions[selectOption.value];
											_op_price = parseFloat(_op_price) + parseFloat(curConfig.price);
                                        }
                                    }
                                });
                            }
                        } else {
                            if (element.getValue().strip() != '') {
                                curConfig = configOptions;
                            }
                        }
                        if(element.type == 'select-multiple' && ('options' in element)) {
                            $A(element.options).each(function(selectOption) {
								_multi_price = 0;
                                if (('selected' in selectOption) && typeof(configOptions[selectOption.value]) != 'undefined') {
                                    if (selectOption.selected) {
                                        curConfig = configOptions[selectOption.value];
										_multi_price = curConfig.price;
                                    } else {
                                        curConfig = {price: 0};
										_multi_price = 0;
                                    }
									
                                    optionsPrice.addCustomPrices(optionId + '-' + selectOption.value, curConfig);
                                    optionsPrice.reload();
                                }
                            });
							_op_price = parseFloat(_op_price) + parseFloat(_multi_price);
                        } else {
                            optionsPrice.addCustomPrices(element.id || optionId, curConfig);							
							/* fix code */							
							if(jQuery("#options_"+optionId+"_text").val() != "" && typeof jQuery("#options_"+optionId+"_text").val() != "undefined") {
								_vTextOption += jQuery("#options_"+optionId+"_text").val() + ";";	
							}
                            optionsPrice.reload();
                        }
                    }
                });				
				
				var _vTextOptionArr = _vTextOption.split(";"), _p, _whPrice = 1, _count = 0;				
				_totalPrice = optionsPrice.productPrice;
				
				if(_vTextOptionArr[0] != "" && _vTextOptionArr[0] != "undefined") {					
					_whPrice = _whPrice * _vTextOptionArr[0];
					_count++;			
				}								
				if(_vTextOptionArr[1] != "" && _vTextOptionArr[1] != "undefined") {					
					_whPrice = _whPrice * _vTextOptionArr[1];
					_count++;					
				}
				
				if(_whPrice != 1 && _count == 2)	{
					_p = parseFloat(_op_price) + parseFloat(_totalPrice) * parseFloat(_whPrice);
				} else {
					_p = parseFloat(_op_price) + parseFloat(_totalPrice);
				}
				
				var partern = optionsPrice.priceFormat.pattern.split("%");				
				var _finalPrice = _p.toLocaleString().split(".")[0] + "." + _p.toFixed(2).split(".")[1];				
				console.log(_finalPrice);
				console.log(_finalPrice == "NaN.undefined");
				
				if(_finalPrice != "NaN.undefined") {
					if(!isNaN(_finalPrice) || jQuery.isNumeric(parseFloat(_finalPrice))) {
						jQuery("#pm-final-price").val(partern[0] + _finalPrice);
					} else {
						jQuery("#pm-final-price").val(partern[0] + optionsPrice.productPrice.toLocaleString().split(".")[0] + "." + optionsPrice.productPrice.toFixed(2).split(".")[1]);
					}		
				}
            }
        }

        function validateOptionsCallback(elmId, result) {
            var container = $(elmId).up('ul.options-list');
            if (result == 'failed') {
                container.removeClassName('validation-passed');
                container.addClassName('validation-failed');
            } else {
                container.removeClassName('validation-failed');
                container.addClassName('validation-passed');
            }
        }
        var opConfig = new Product.Options(<?php echo $this->getJsonConfig() ?>);
        //]]>
    </script>

    <dl>
        <dt>
            <label class="required">
                <em>*</em>
                Price Matrix
            </label>
        </dt>
        <dd>
            <?php echo $this->getChildHtml('catalog_product_view_option_type_cmsmart'); ?>
        </dd>
    </dl>

    <dl>
        <?php foreach($_options as $_option): ?>
            <?php echo $this->getOptionHtml($_option) ?>
        <?php endforeach; ?>
    </dl>
<?php endif; ?>

<?php endif;?>